%rb19_binary                         /usr/bin/ruby
%rb19_arch                           %(%{rb19_binary} -e 'print RUBY_PLATFORM')
%rb19_ver                            %(%{rb19_binary} -r rbconfig -e 'print RbConfig::CONFIG["ruby_version"]')

## Base
# "rubylibprefix"=>"/usr/lib64/ruby",
%rb19_dir           %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["rubylibprefix"]' )
# "rubylibdir"    =>"/usr/lib64/ruby/1.9.1",
%rb19_libdir        %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["rubylibdir"]' )
# "archdir"       =>"/usr/lib64/ruby/1.9.1/x86_64-linux",
%rb19_archdir       %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["archdir"]' )

## Site
# "sitedir"       =>"/usr/lib64/ruby/site_ruby",
%rb19_sitedir       %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["sitedir"]' )
# "sitelibdir"    =>"/usr/lib64/ruby/site_ruby/1.9.1",
%rb19_sitelibdir    %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["sitelibdir"]' )
# "sitearchdir"   =>"/usr/lib64/ruby/site_ruby/1.9.1/x86_64-linux",
%rb19_sitearchdir   %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["sitearchdir"]' )

## Vendor
# "vendordir"     =>"/usr/lib64/ruby/vendor_ruby",
%rb19_vendordir     %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["vendordir"]' )
# "vendorlibdir"  =>"/usr/lib64/ruby/vendor_ruby/1.9.1",
%rb19_vendorlibdir  %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["vendorlibdir"]' )
# "vendorarchdir" =>"/usr/lib64/ruby/vendor_ruby/1.9.1/x86_64-linux",
%rb19_vendorarchdir %(%{rb19_binary} -rrbconfig -e 'puts RbConfig::CONFIG["vendorarchdir"]' )


%gem19_install                       /usr/lib/rpm/gem_install_wrapper.sh 
%gem19_cleanup                       /usr/bin/gem_build_cleanup %{buildroot}%{_libdir}/ruby/gems/%{rb19_ver}/gems/%{mod_name}-%{version}/
%rubygems19_requires() %{requires_eq ruby}

%rubygems_requires                 %{rubygems19_requires}

%rb_binary                         %{rb19_binary}
%gem_binary                        /usr/bin/gem
%rb_arch %{rb19_arch}
%rb_ver %{rb19_ver}

%rb_dir %{rb19_dir}
%rb_libdir %{rb19_libdir}
%rb_archdir %{rb19_archdir}

%rb_sitedir %rb19_sitedir
%rb_sitelibdir %rb19_sitelibdir
%rb_sitearchdir %rb19_sitearchdir

%rb_vendordir %rb19_vendordir  
%rb_vendorlibdir %rb19_vendorlibdir
%rb_vendorarchdir %rb19_vendorarchdir 

# old names
%rb_sitelib                        %rb19_sitelibdir
%rb_sitearch                       %rb19_sitearchdir
#
%rb_vendorlib                      %rb19_vendorlibdir
%rb_vendorarch                     %rb19_vendorarchdir

# %%gem_unpack macro unpacks a gem file into %%{_builddir}
#
# example:
#   %prep
#   %gem_unpack %{SOURCE0}
#   %patch1 -p1
#
%gem_unpack() \
if [ %# -eq 0 ]; then \
    %{gem_binary} unpack --verbose %{SOURCE0} \
else \
    %{gem_binary} unpack --verbose %1 \
fi \
cd %{mod_name}-%{version} \
%{nil}

# %%gem_build macro ...
#
%gem_build() \
if [ %# -ge 1 ]; then \
    %{gem_binary} install --verbose --local --build-root=%{_builddir} %* ;\
else \
    GEMSPEC_SOURCE_DIR=`find . -maxdepth 2 -type f -name "*.gemspec" | xargs dirname` \
    cd $GEMSPEC_SOURCE_DIR && %{gem_binary} build --verbose *.gemspec \
fi ;\
%{nil}

# %%gem_install macro ...
#
# When invoked with a single parameter, the macro retains the old macro behavior, i.e. 
# building the upstream gem directly in $RPM_BUILD_ROOT without unpacking to %{_builddir} first.
#
%gem_install() \
if [ %# -ge 1 ]; then \
    cp -av %{_builddir}/* %{buildroot}/ ; \
else \
    GEM_FILE=`find . -maxdepth 2 -type f -name "%{mod_name}-%{version}.gem"` \
    %{gem_binary} install --verbose --local --bindir %{buildroot}%{_bindir} --install-dir %{buildroot}%{_libdir}/ruby/gems/%{rb_ver} $GEM_FILE \
fi; \
if test -d $RPM_BUILD_ROOT/usr/bin; then \
  ( cd $RPM_BUILD_ROOT/usr/bin; \
  bins=`ls -1 *1.9 2> /dev/null`; \
  if test -n "$bins"; then \
    for bin in $bins; do \
      mv -v $bin $(echo "$bin" | sed -e 's,1.9$,,'); \
    done ;\
  fi ) ;\
fi ;\
%{nil}

%gem_cleanup() \
/usr/bin/gem_build_cleanup %{buildroot}%{_libdir}/ruby/gems/%{rb_ver}/ \
%{nil}

%gem_cleanup                       /usr/bin/gem_build_cleanup %{buildroot}%{_libdir}/ruby/gems/

